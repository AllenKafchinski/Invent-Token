/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface INVENTInterface extends ethers.utils.Interface {
  functions: {
    "Change_Wallet_Burn(address)": FunctionFragment;
    "Change_Wallet_Buyback(address)": FunctionFragment;
    "Change_Wallet_Marketing(address)": FunctionFragment;
    "PCSRouter()": FunctionFragment;
    "___feesInfo()": FunctionFragment;
    "___tokenInfo()": FunctionFragment;
    "___wallets()": FunctionFragment;
    "_balance_reflected(address)": FunctionFragment;
    "_balance_total(address)": FunctionFragment;
    "_fee_burn()": FunctionFragment;
    "_fee_buyback()": FunctionFragment;
    "_fee_buyback_convert_limit()": FunctionFragment;
    "_fee_buyback_min_bal()": FunctionFragment;
    "_fee_denominator()": FunctionFragment;
    "_fee_liquidity()": FunctionFragment;
    "_fee_marketing()": FunctionFragment;
    "_fee_marketing_convert_limit()": FunctionFragment;
    "_fee_marketing_min_bal()": FunctionFragment;
    "_fee_reflection()": FunctionFragment;
    "_isBlacklisted(address)": FunctionFragment;
    "_isWhitelisted(address)": FunctionFragment;
    "_maxTxAmount()": FunctionFragment;
    "_maxWalletToken()": FunctionFragment;
    "_numTokensSellToAddToLiquidity()": FunctionFragment;
    "_wallet_burn()": FunctionFragment;
    "_wallet_buyback()": FunctionFragment;
    "_wallet_marketing()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn_tokens_to_dead(address,uint256)": FunctionFragment;
    "buyCooldownEnabled()": FunctionFragment;
    "convertLiquidityBalance(uint256)": FunctionFragment;
    "cooldownEnabled(bool,uint8)": FunctionFragment;
    "cooldownTimerInterval()": FunctionFragment;
    "deadAddress()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deliver(uint256)": FunctionFragment;
    "excludeFromReward(address)": FunctionFragment;
    "fees_to_bnb_manual(uint256,address,uint256)": FunctionFragment;
    "includeInReward(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFee(address)": FunctionFragment;
    "isExcludedFromReward(address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "purgeContractBalance()": FunctionFragment;
    "reflectionFromToken(uint256,bool)": FunctionFragment;
    "s_excludeFromFee(address[],bool)": FunctionFragment;
    "s_manageBlacklist(address[],bool)": FunctionFragment;
    "s_manageExcludeFromFee(address[],bool)": FunctionFragment;
    "s_manageWhitelist(address[],bool)": FunctionFragment;
    "sellMultiplier()": FunctionFragment;
    "setMaxTxPercent_base1000(uint256)": FunctionFragment;
    "setMaxTxTokens(uint256)": FunctionFragment;
    "setMaxWalletPercent_base1000(uint256)": FunctionFragment;
    "setMaxWalletTokens(uint256)": FunctionFragment;
    "setNumTokensSellToAddToLiquidityt(uint256)": FunctionFragment;
    "setSwapAndLiquifyEnabled(bool)": FunctionFragment;
    "set_All_Fees(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "set_All_Fees_Minimum_Balance(uint256,uint256)": FunctionFragment;
    "set_All_Fees_Triggers(uint256,uint256)": FunctionFragment;
    "set_sell_multiplier(uint256)": FunctionFragment;
    "swapAndLiquifyEnabled()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenFromReflection(uint256)": FunctionFragment;
    "totalFees()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingOpen()": FunctionFragment;
    "tradingStatus(bool)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "Change_Wallet_Burn",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "Change_Wallet_Buyback",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "Change_Wallet_Marketing",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "PCSRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "___feesInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "___tokenInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "___wallets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_balance_reflected",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_balance_total",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "_fee_burn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_fee_buyback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_fee_buyback_convert_limit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_fee_buyback_min_bal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_fee_denominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_fee_liquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_fee_marketing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_fee_marketing_convert_limit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_fee_marketing_min_bal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_fee_reflection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_isBlacklisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxWalletToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_numTokensSellToAddToLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_wallet_burn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_wallet_buyback",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_wallet_marketing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn_tokens_to_dead",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCooldownEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertLiquidityBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownEnabled",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownTimerInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deadAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deliver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fees_to_bnb_manual",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromReward",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purgeContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reflectionFromToken",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "s_excludeFromFee",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "s_manageBlacklist",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "s_manageExcludeFromFee",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "s_manageWhitelist",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sellMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTxPercent_base1000",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTxTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWalletPercent_base1000",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWalletTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNumTokensSellToAddToLiquidityt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAndLiquifyEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "set_All_Fees",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "set_All_Fees_Minimum_Balance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_All_Fees_Triggers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_sell_multiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenFromReflection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "Change_Wallet_Burn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Change_Wallet_Buyback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Change_Wallet_Marketing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PCSRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "___feesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "___tokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "___wallets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_balance_reflected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_balance_total",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_fee_burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_fee_buyback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fee_buyback_convert_limit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fee_buyback_min_bal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fee_denominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fee_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fee_marketing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fee_marketing_convert_limit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fee_marketing_min_bal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fee_reflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxWalletToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_numTokensSellToAddToLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_wallet_burn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_wallet_buyback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_wallet_marketing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burn_tokens_to_dead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCooldownEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertLiquidityBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownTimerInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fees_to_bnb_manual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purgeContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reflectionFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_excludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_manageBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_manageExcludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_manageWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTxPercent_base1000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTxTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWalletPercent_base1000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWalletTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumTokensSellToAddToLiquidityt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_All_Fees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_All_Fees_Minimum_Balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_All_Fees_Triggers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_sell_multiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFromReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "MinTokensBeforeSwapUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "SwapAndLiquifyEnabledUpdated(bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferDetails(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinTokensBeforeSwapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SwapAndLiquifyEnabledUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferDetails"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type MinTokensBeforeSwapUpdatedEvent = TypedEvent<
  [BigNumber] & { minTokensBeforeSwap: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    tokensSwapped: BigNumber;
    ethReceived: BigNumber;
    tokensIntoLiqudity: BigNumber;
  }
>;

export type SwapAndLiquifyEnabledUpdatedEvent = TypedEvent<
  [boolean] & { enabled: boolean }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type TransferDetailsEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    from: string;
    to: string;
    total_Amount: BigNumber;
    reflected_amount: BigNumber;
    total_TransferAmount: BigNumber;
    reflected_TransferAmount: BigNumber;
  }
>;

export class INVENT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INVENTInterface;

  functions: {
    Change_Wallet_Burn(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    Change_Wallet_Buyback(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    Change_Wallet_Marketing(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    PCSRouter(overrides?: CallOverrides): Promise<[string]>;

    ___feesInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        NumTokensSellToAddToLiquidity: BigNumber;
        contractTokenBalance: BigNumber;
        Reflection_tokens_stored: BigNumber;
      }
    >;

    ___tokenInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        number
      ] & {
        Decimals: number;
        MaxTxAmount: BigNumber;
        MaxWalletToken: BigNumber;
        TotalSupply: BigNumber;
        Reflected_Supply: BigNumber;
        Reflection_Rate: BigNumber;
        TradingOpen: boolean;
        Cooldown_timer_enabled: boolean;
        Cooldown_timer_interval: number;
      }
    >;

    ___wallets(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        Reflection_Fees: BigNumber;
        Liquidity_Fee: BigNumber;
        Buyback_Fee: BigNumber;
        Buyback_Fee_Convert_Limit: BigNumber;
        Buyback_Fee_Minimum_Balance: BigNumber;
        Marketing_Fee: BigNumber;
        Marketing_Fee_Convert_Limit: BigNumber;
        Marketing_Fee_Minimum_Balance: BigNumber;
        Burn_Fee: BigNumber;
        Buyback_Wallet_Address: string;
        Burn_Wallet_Address: string;
        Marketing_Wallet_Address: string;
      }
    >;

    _balance_reflected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _balance_total(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _fee_burn(overrides?: CallOverrides): Promise<[BigNumber]>;

    _fee_buyback(overrides?: CallOverrides): Promise<[BigNumber]>;

    _fee_buyback_convert_limit(overrides?: CallOverrides): Promise<[BigNumber]>;

    _fee_buyback_min_bal(overrides?: CallOverrides): Promise<[BigNumber]>;

    _fee_denominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    _fee_liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    _fee_marketing(overrides?: CallOverrides): Promise<[BigNumber]>;

    _fee_marketing_convert_limit(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _fee_marketing_min_bal(overrides?: CallOverrides): Promise<[BigNumber]>;

    _fee_reflection(overrides?: CallOverrides): Promise<[BigNumber]>;

    _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    _isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    _maxTxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxWalletToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    _numTokensSellToAddToLiquidity(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _wallet_burn(overrides?: CallOverrides): Promise<[string]>;

    _wallet_buyback(overrides?: CallOverrides): Promise<[string]>;

    _wallet_marketing(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn_tokens_to_dead(
      wallet: string,
      tokensToConvert: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyCooldownEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    convertLiquidityBalance(
      tokensToConvert: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cooldownEnabled(
      _status: boolean,
      _interval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cooldownTimerInterval(overrides?: CallOverrides): Promise<[number]>;

    deadAddress(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deliver(
      tAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fees_to_bnb_manual(
      tokensToConvert: BigNumberish,
      feeWallet: string,
      minBalanceToKeep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purgeContractBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    s_excludeFromFee(
      addresses: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    s_manageBlacklist(
      addresses: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    s_manageExcludeFromFee(
      addresses: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    s_manageWhitelist(
      addresses: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMaxTxPercent_base1000(
      maxTxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTxTokens(
      maxTxTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxWalletPercent_base1000(
      maxWallPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxWalletTokens(
      maxWallTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNumTokensSellToAddToLiquidityt(
      numTokensSellToAddToLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapAndLiquifyEnabled(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_All_Fees(
      Buyback_Fee: BigNumberish,
      Burn_Fees: BigNumberish,
      Liquidity_Fees: BigNumberish,
      Reflection_Fees: BigNumberish,
      MarketingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_All_Fees_Minimum_Balance(
      marketing_fee_minimum_balance: BigNumberish,
      buyback_fee_minimum_balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_All_Fees_Triggers(
      marketing_fee_convert_limit: BigNumberish,
      buyback_fee_convert_limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_sell_multiplier(
      Multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingOpen(overrides?: CallOverrides): Promise<[boolean]>;

    tradingStatus(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;
  };

  Change_Wallet_Burn(
    newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  Change_Wallet_Buyback(
    newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  Change_Wallet_Marketing(
    newWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  PCSRouter(overrides?: CallOverrides): Promise<string>;

  ___feesInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      NumTokensSellToAddToLiquidity: BigNumber;
      contractTokenBalance: BigNumber;
      Reflection_tokens_stored: BigNumber;
    }
  >;

  ___tokenInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      number
    ] & {
      Decimals: number;
      MaxTxAmount: BigNumber;
      MaxWalletToken: BigNumber;
      TotalSupply: BigNumber;
      Reflected_Supply: BigNumber;
      Reflection_Rate: BigNumber;
      TradingOpen: boolean;
      Cooldown_timer_enabled: boolean;
      Cooldown_timer_interval: number;
    }
  >;

  ___wallets(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string
    ] & {
      Reflection_Fees: BigNumber;
      Liquidity_Fee: BigNumber;
      Buyback_Fee: BigNumber;
      Buyback_Fee_Convert_Limit: BigNumber;
      Buyback_Fee_Minimum_Balance: BigNumber;
      Marketing_Fee: BigNumber;
      Marketing_Fee_Convert_Limit: BigNumber;
      Marketing_Fee_Minimum_Balance: BigNumber;
      Burn_Fee: BigNumber;
      Buyback_Wallet_Address: string;
      Burn_Wallet_Address: string;
      Marketing_Wallet_Address: string;
    }
  >;

  _balance_reflected(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _balance_total(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  _fee_burn(overrides?: CallOverrides): Promise<BigNumber>;

  _fee_buyback(overrides?: CallOverrides): Promise<BigNumber>;

  _fee_buyback_convert_limit(overrides?: CallOverrides): Promise<BigNumber>;

  _fee_buyback_min_bal(overrides?: CallOverrides): Promise<BigNumber>;

  _fee_denominator(overrides?: CallOverrides): Promise<BigNumber>;

  _fee_liquidity(overrides?: CallOverrides): Promise<BigNumber>;

  _fee_marketing(overrides?: CallOverrides): Promise<BigNumber>;

  _fee_marketing_convert_limit(overrides?: CallOverrides): Promise<BigNumber>;

  _fee_marketing_min_bal(overrides?: CallOverrides): Promise<BigNumber>;

  _fee_reflection(overrides?: CallOverrides): Promise<BigNumber>;

  _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  _isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  _maxWalletToken(overrides?: CallOverrides): Promise<BigNumber>;

  _numTokensSellToAddToLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  _wallet_burn(overrides?: CallOverrides): Promise<string>;

  _wallet_buyback(overrides?: CallOverrides): Promise<string>;

  _wallet_marketing(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn_tokens_to_dead(
    wallet: string,
    tokensToConvert: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyCooldownEnabled(overrides?: CallOverrides): Promise<boolean>;

  convertLiquidityBalance(
    tokensToConvert: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cooldownEnabled(
    _status: boolean,
    _interval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cooldownTimerInterval(overrides?: CallOverrides): Promise<number>;

  deadAddress(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deliver(
    tAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromReward(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fees_to_bnb_manual(
    tokensToConvert: BigNumberish,
    feeWallet: string,
    minBalanceToKeep: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  includeInReward(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExcludedFromFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExcludedFromReward(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  purgeContractBalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reflectionFromToken(
    tAmount: BigNumberish,
    deductTransferFee: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  s_excludeFromFee(
    addresses: string[],
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  s_manageBlacklist(
    addresses: string[],
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  s_manageExcludeFromFee(
    addresses: string[],
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  s_manageWhitelist(
    addresses: string[],
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  setMaxTxPercent_base1000(
    maxTxPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTxTokens(
    maxTxTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxWalletPercent_base1000(
    maxWallPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxWalletTokens(
    maxWallTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNumTokensSellToAddToLiquidityt(
    numTokensSellToAddToLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapAndLiquifyEnabled(
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_All_Fees(
    Buyback_Fee: BigNumberish,
    Burn_Fees: BigNumberish,
    Liquidity_Fees: BigNumberish,
    Reflection_Fees: BigNumberish,
    MarketingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_All_Fees_Minimum_Balance(
    marketing_fee_minimum_balance: BigNumberish,
    buyback_fee_minimum_balance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_All_Fees_Triggers(
    marketing_fee_convert_limit: BigNumberish,
    buyback_fee_convert_limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_sell_multiplier(
    Multiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenFromReflection(
    rAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingOpen(overrides?: CallOverrides): Promise<boolean>;

  tradingStatus(
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    Change_Wallet_Burn(
      newWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    Change_Wallet_Buyback(
      newWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    Change_Wallet_Marketing(
      newWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    PCSRouter(overrides?: CallOverrides): Promise<string>;

    ___feesInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        NumTokensSellToAddToLiquidity: BigNumber;
        contractTokenBalance: BigNumber;
        Reflection_tokens_stored: BigNumber;
      }
    >;

    ___tokenInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        number
      ] & {
        Decimals: number;
        MaxTxAmount: BigNumber;
        MaxWalletToken: BigNumber;
        TotalSupply: BigNumber;
        Reflected_Supply: BigNumber;
        Reflection_Rate: BigNumber;
        TradingOpen: boolean;
        Cooldown_timer_enabled: boolean;
        Cooldown_timer_interval: number;
      }
    >;

    ___wallets(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        Reflection_Fees: BigNumber;
        Liquidity_Fee: BigNumber;
        Buyback_Fee: BigNumber;
        Buyback_Fee_Convert_Limit: BigNumber;
        Buyback_Fee_Minimum_Balance: BigNumber;
        Marketing_Fee: BigNumber;
        Marketing_Fee_Convert_Limit: BigNumber;
        Marketing_Fee_Minimum_Balance: BigNumber;
        Burn_Fee: BigNumber;
        Buyback_Wallet_Address: string;
        Burn_Wallet_Address: string;
        Marketing_Wallet_Address: string;
      }
    >;

    _balance_reflected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _balance_total(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _fee_burn(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_buyback(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_buyback_convert_limit(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_buyback_min_bal(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_denominator(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_marketing(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_marketing_convert_limit(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_marketing_min_bal(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_reflection(overrides?: CallOverrides): Promise<BigNumber>;

    _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    _isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _maxWalletToken(overrides?: CallOverrides): Promise<BigNumber>;

    _numTokensSellToAddToLiquidity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _wallet_burn(overrides?: CallOverrides): Promise<string>;

    _wallet_buyback(overrides?: CallOverrides): Promise<string>;

    _wallet_marketing(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn_tokens_to_dead(
      wallet: string,
      tokensToConvert: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyCooldownEnabled(overrides?: CallOverrides): Promise<boolean>;

    convertLiquidityBalance(
      tokensToConvert: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cooldownEnabled(
      _status: boolean,
      _interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cooldownTimerInterval(overrides?: CallOverrides): Promise<number>;

    deadAddress(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deliver(tAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    excludeFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fees_to_bnb_manual(
      tokensToConvert: BigNumberish,
      feeWallet: string,
      minBalanceToKeep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    includeInReward(account: string, overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    purgeContractBalance(overrides?: CallOverrides): Promise<void>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_excludeFromFee(
      addresses: string[],
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    s_manageBlacklist(
      addresses: string[],
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    s_manageExcludeFromFee(
      addresses: string[],
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    s_manageWhitelist(
      addresses: string[],
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sellMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxTxPercent_base1000(
      maxTxPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTxTokens(
      maxTxTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxWalletPercent_base1000(
      maxWallPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxWalletTokens(
      maxWallTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNumTokensSellToAddToLiquidityt(
      numTokensSellToAddToLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapAndLiquifyEnabled(
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    set_All_Fees(
      Buyback_Fee: BigNumberish,
      Burn_Fees: BigNumberish,
      Liquidity_Fees: BigNumberish,
      Reflection_Fees: BigNumberish,
      MarketingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_All_Fees_Minimum_Balance(
      marketing_fee_minimum_balance: BigNumberish,
      buyback_fee_minimum_balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_All_Fees_Triggers(
      marketing_fee_convert_limit: BigNumberish,
      buyback_fee_convert_limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_sell_multiplier(
      Multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingOpen(overrides?: CallOverrides): Promise<boolean>;

    tradingStatus(_status: boolean, overrides?: CallOverrides): Promise<void>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "MinTokensBeforeSwapUpdated(uint256)"(
      minTokensBeforeSwap?: null
    ): TypedEventFilter<[BigNumber], { minTokensBeforeSwap: BigNumber }>;

    MinTokensBeforeSwapUpdated(
      minTokensBeforeSwap?: null
    ): TypedEventFilter<[BigNumber], { minTokensBeforeSwap: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiqudity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        tokensSwapped: BigNumber;
        ethReceived: BigNumber;
        tokensIntoLiqudity: BigNumber;
      }
    >;

    SwapAndLiquify(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiqudity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        tokensSwapped: BigNumber;
        ethReceived: BigNumber;
        tokensIntoLiqudity: BigNumber;
      }
    >;

    "SwapAndLiquifyEnabledUpdated(bool)"(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    SwapAndLiquifyEnabledUpdated(
      enabled?: null
    ): TypedEventFilter<[boolean], { enabled: boolean }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "TransferDetails(address,address,uint256,uint256,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      total_Amount?: null,
      reflected_amount?: null,
      total_TransferAmount?: null,
      reflected_TransferAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        from: string;
        to: string;
        total_Amount: BigNumber;
        reflected_amount: BigNumber;
        total_TransferAmount: BigNumber;
        reflected_TransferAmount: BigNumber;
      }
    >;

    TransferDetails(
      from?: string | null,
      to?: string | null,
      total_Amount?: null,
      reflected_amount?: null,
      total_TransferAmount?: null,
      reflected_TransferAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        from: string;
        to: string;
        total_Amount: BigNumber;
        reflected_amount: BigNumber;
        total_TransferAmount: BigNumber;
        reflected_TransferAmount: BigNumber;
      }
    >;
  };

  estimateGas: {
    Change_Wallet_Burn(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    Change_Wallet_Buyback(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    Change_Wallet_Marketing(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    PCSRouter(overrides?: CallOverrides): Promise<BigNumber>;

    ___feesInfo(overrides?: CallOverrides): Promise<BigNumber>;

    ___tokenInfo(overrides?: CallOverrides): Promise<BigNumber>;

    ___wallets(overrides?: CallOverrides): Promise<BigNumber>;

    _balance_reflected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _balance_total(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _fee_burn(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_buyback(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_buyback_convert_limit(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_buyback_min_bal(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_denominator(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_marketing(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_marketing_convert_limit(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_marketing_min_bal(overrides?: CallOverrides): Promise<BigNumber>;

    _fee_reflection(overrides?: CallOverrides): Promise<BigNumber>;

    _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _maxWalletToken(overrides?: CallOverrides): Promise<BigNumber>;

    _numTokensSellToAddToLiquidity(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _wallet_burn(overrides?: CallOverrides): Promise<BigNumber>;

    _wallet_buyback(overrides?: CallOverrides): Promise<BigNumber>;

    _wallet_marketing(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn_tokens_to_dead(
      wallet: string,
      tokensToConvert: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyCooldownEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    convertLiquidityBalance(
      tokensToConvert: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cooldownEnabled(
      _status: boolean,
      _interval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cooldownTimerInterval(overrides?: CallOverrides): Promise<BigNumber>;

    deadAddress(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deliver(
      tAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fees_to_bnb_manual(
      tokensToConvert: BigNumberish,
      feeWallet: string,
      minBalanceToKeep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purgeContractBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_excludeFromFee(
      addresses: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    s_manageBlacklist(
      addresses: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    s_manageExcludeFromFee(
      addresses: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    s_manageWhitelist(
      addresses: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxTxPercent_base1000(
      maxTxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTxTokens(
      maxTxTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxWalletPercent_base1000(
      maxWallPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxWalletTokens(
      maxWallTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNumTokensSellToAddToLiquidityt(
      numTokensSellToAddToLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapAndLiquifyEnabled(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_All_Fees(
      Buyback_Fee: BigNumberish,
      Burn_Fees: BigNumberish,
      Liquidity_Fees: BigNumberish,
      Reflection_Fees: BigNumberish,
      MarketingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_All_Fees_Minimum_Balance(
      marketing_fee_minimum_balance: BigNumberish,
      buyback_fee_minimum_balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_All_Fees_Triggers(
      marketing_fee_convert_limit: BigNumberish,
      buyback_fee_convert_limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_sell_multiplier(
      Multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingOpen(overrides?: CallOverrides): Promise<BigNumber>;

    tradingStatus(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Change_Wallet_Burn(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    Change_Wallet_Buyback(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    Change_Wallet_Marketing(
      newWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    PCSRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ___feesInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ___tokenInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ___wallets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _balance_reflected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _balance_total(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _fee_burn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _fee_buyback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _fee_buyback_convert_limit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _fee_buyback_min_bal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _fee_denominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _fee_liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _fee_marketing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _fee_marketing_convert_limit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _fee_marketing_min_bal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _fee_reflection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _isBlacklisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _maxTxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxWalletToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _numTokensSellToAddToLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _wallet_burn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _wallet_buyback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _wallet_marketing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn_tokens_to_dead(
      wallet: string,
      tokensToConvert: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyCooldownEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertLiquidityBalance(
      tokensToConvert: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cooldownEnabled(
      _status: boolean,
      _interval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cooldownTimerInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deadAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deliver(
      tAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fees_to_bnb_manual(
      tokensToConvert: BigNumberish,
      feeWallet: string,
      minBalanceToKeep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purgeContractBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_excludeFromFee(
      addresses: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    s_manageBlacklist(
      addresses: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    s_manageExcludeFromFee(
      addresses: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    s_manageWhitelist(
      addresses: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaxTxPercent_base1000(
      maxTxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTxTokens(
      maxTxTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxWalletPercent_base1000(
      maxWallPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxWalletTokens(
      maxWallTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNumTokensSellToAddToLiquidityt(
      numTokensSellToAddToLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapAndLiquifyEnabled(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_All_Fees(
      Buyback_Fee: BigNumberish,
      Burn_Fees: BigNumberish,
      Liquidity_Fees: BigNumberish,
      Reflection_Fees: BigNumberish,
      MarketingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_All_Fees_Minimum_Balance(
      marketing_fee_minimum_balance: BigNumberish,
      buyback_fee_minimum_balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_All_Fees_Triggers(
      marketing_fee_convert_limit: BigNumberish,
      buyback_fee_convert_limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_sell_multiplier(
      Multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAndLiquifyEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingStatus(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
